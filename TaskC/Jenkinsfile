pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/thurahtetaung/grpc.git', description: 'URL of the forked grpc repo')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to checkout')
        string(name: 'PARSER_REPO_URL', defaultValue: 'https://github.com/thurahtetaung/doxygen-log-parser.git', description: 'URL of the Python parser repo')
        string(name: 'PARSER_BRANCH', defaultValue: 'main', description: 'Branch to checkout for the parser repo')
    }

    stages {
        stage('Checkout GrPC') {
            steps {
                // Clone the forked grpc repository
                echo "Cloning repository ${params.REPO_URL}, branch ${params.BRANCH}"
                git url: "${params.REPO_URL}", branch: "${params.BRANCH}"
            }
        }

        stage('Generate Doxygen Config') {
            steps {
                // Generate Doxygen configuration file
                sh 'doxygen -g'

                // Modify the configuration file
                script {
                    // Use the correct source directories from the grpc repo
                    sh 'sed -i "s|^INPUT                  =|INPUT                  = src include|g" Doxyfile'

                    // Make it recursive to include subdirectories
                    sh 'sed -i "s|^RECURSIVE              = NO|RECURSIVE              = YES|g" Doxyfile'

                    // Disable all output formats except HTML
                    sh 'sed -i "s|^GENERATE_LATEX         = YES|GENERATE_LATEX         = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_RTF           = YES|GENERATE_RTF           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_MAN           = YES|GENERATE_MAN           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_XML           = YES|GENERATE_XML           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_DOCBOOK       = YES|GENERATE_DOCBOOK       = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_AUTOGEN_DEF   = YES|GENERATE_AUTOGEN_DEF   = NO|g" Doxyfile'

                    // Ensure HTML is enabled
                    sh 'sed -i "s|^GENERATE_HTML          = NO|GENERATE_HTML          = YES|g" Doxyfile'

                    // Enable warnings output to a file
                    sh 'sed -i "s|^WARN_LOGFILE           =|WARN_LOGFILE           = doxygen_warnings.log|g" Doxyfile'
                }
            }
        }

        stage('Run Doxygen') {
            steps {
                // Run Doxygen with the modified config file
                sh 'doxygen Doxyfile'

                // Ensure the warnings file exists (create empty if not)
                sh 'touch doxygen_warnings.log'
            }
        }

        stage('Package Documentation') {
            steps {
                // Pack the generated HTML documentation
                sh 'tar -czf doc.tar.gz html/'
            }
        }

        stage('Archive Documentation') {
            steps {
                // Archive the documentation package
                archiveArtifacts artifacts: 'doc.tar.gz', fingerprint: true
            }
        }

        stage('Checkout Parser') {
            steps {
                // Create a directory for the parser
                sh 'mkdir -p parser'
                dir('parser') {
                    // Clone the parser repository
                    git url: "${params.PARSER_REPO_URL}", branch: "${params.PARSER_BRANCH}"

                    // Create and use a Python virtual environment for dependencies
                    // There are no actual dependencies to install for this parser, I am just simulating the process as to show what should be done if there are any dependencies to install
                    sh '''
                        # Create a virtual environment
                        python3 -m venv venv

                        # Activate the virtual environment
                        . venv/bin/activate

                        # Install dependencies if any
                        if [ -f "requirements.txt" ]; then
                            pip install -r requirements.txt
                        fi
                    '''
                }
            }
        }

        stage('Parse Warnings') {
            steps {
                // Run the parser on the warnings file using the virtual environment
                sh '''
                    # Activate the virtual environment
                    . parser/venv/bin/activate

                    # Run the parser
                    python parser/doxygen_parser.py doxygen_warnings.log -o warnings.csv
                '''

                // Archive the CSV output
                archiveArtifacts artifacts: 'warnings.csv', fingerprint: true
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}