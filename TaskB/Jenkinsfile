pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/thurahtetaung/grpc.git', description: 'URL of the forked grpc repo')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to checkout')
    }

    stages {
        stage('Checkout') {
            steps {
                // Clean workspace first
                cleanWs()

                // Clone the forked grpc repository
                echo "Cloning repository ${params.REPO_URL}, branch ${params.BRANCH}"
                git url: "${params.REPO_URL}", branch: "${params.BRANCH}"
            }
        }

        stage('Install Dependencies') {
            steps {
                // Try to install Graphviz for dot command (may need sudo rights)
                sh 'apt-get update && apt-get install -y graphviz || echo "Warning: Could not install graphviz. Diagrams may not be generated."'
            }
        }

        stage('Show current directory structure') {
            steps {
                // Show the current directory structure to verify checkout
                sh 'ls -la'
            }
        }

        stage('Generate Doxygen Config') {
            steps {
                // Generate Doxygen configuration file
                sh 'doxygen -g'

                // Modify the configuration file
                script {
                    // Use the correct source directories from the grpc repo
                    sh 'sed -i "s|^INPUT                  =|INPUT                  = src include|g" Doxyfile'

                    // Make it recursive to include subdirectories
                    sh 'sed -i "s|^RECURSIVE              = NO|RECURSIVE              = YES|g" Doxyfile'

                    // Disable all output formats except HTML
                    sh 'sed -i "s|^GENERATE_LATEX         = YES|GENERATE_LATEX         = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_RTF           = YES|GENERATE_RTF           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_MAN           = YES|GENERATE_MAN           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_XML           = YES|GENERATE_XML           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_DOCBOOK       = YES|GENERATE_DOCBOOK       = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_AUTOGEN_DEF   = YES|GENERATE_AUTOGEN_DEF   = NO|g" Doxyfile'

                    // Ensure HTML is enabled
                    sh 'sed -i "s|^GENERATE_HTML          = NO|GENERATE_HTML          = YES|g" Doxyfile'

                    // Add warning log file
                    sh 'sed -i "s|^WARN_LOGFILE           =|WARN_LOGFILE           = doxygen_warnings.log|g" Doxyfile'
                }
            }
        }

        stage('Run Doxygen') {
            steps {
                // Create empty warnings log file
                sh 'touch doxygen_warnings.log'

                // Run Doxygen with the modified config file
                sh 'doxygen Doxyfile || echo "Doxygen completed with warnings"'
            }
        }

        stage('Check Documentation') {
            steps {
                // Show what files were generated
                sh 'find html -type f | wc -l || echo "No files found"'
                sh 'ls -la html/ || echo "No html directory found"'
            }
        }

        stage('Package Documentation') {
            steps {
                // Pack the generated HTML documentation
                sh 'tar -czf doc.tar.gz html/ || echo "Failed to create archive"'
            }
        }

        stage('Archive Artifacts') {
            steps {
                // Archive the documentation package
                archiveArtifacts artifacts: 'doc.tar.gz', fingerprint: true, allowEmptyArchive: true

                // Archive the warnings log
                archiveArtifacts artifacts: 'doxygen_warnings.log', fingerprint: true, allowEmptyArchive: true
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}