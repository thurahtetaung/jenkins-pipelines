pipeline {
    agent any

    parameters {
        string(name: 'REPO_URL', defaultValue: 'https://github.com/thurahtetaung/grpc.git', description: 'URL of the forked grpc repo')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Branch to checkout')
    }

    stages {
        stage('Checkout') {
            steps {
                // Clone the forked grpc repository
                echo "Cloning repository ${params.REPO_URL}, branch ${params.BRANCH}"
                git url: "${params.REPO_URL}", branch: "${params.BRANCH}"
            }
        }

        stage('Generate Doxygen Config') {
            steps {
                // Generate Doxygen configuration file
                sh 'doxygen -g'

                // Modify the configuration file
                script {
                    // Set the INPUT to src folder
                    sh 'sed -i "s|^INPUT                  =|INPUT                  = src|g" Doxyfile'

                    // Disable all output formats except HTML
                    sh 'sed -i "s|^GENERATE_LATEX         = YES|GENERATE_LATEX         = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_RTF           = YES|GENERATE_RTF           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_MAN           = YES|GENERATE_MAN           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_XML           = YES|GENERATE_XML           = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_DOCBOOK       = YES|GENERATE_DOCBOOK       = NO|g" Doxyfile'
                    sh 'sed -i "s|^GENERATE_AUTOGEN_DEF   = YES|GENERATE_AUTOGEN_DEF   = NO|g" Doxyfile'

                    // Ensure HTML is enabled
                    sh 'sed -i "s|^GENERATE_HTML          = NO|GENERATE_HTML          = YES|g" Doxyfile'
                }
            }
        }

        stage('Show current directory structure') {
            steps {
                // Show the current directory structure
                sh 'ls -R'
            }
        }

        // stage('Show Doxy File in Jenkins Console') {
        //     steps {
        //         // Show the Doxyfile in the Jenkins console
        //         sh 'cat Doxyfile'
        //     }
        // }

        stage('Run Doxygen') {
            steps {
                // Run Doxygen with the modified config file
                sh 'doxygen Doxyfile'
            }
        }


        stage('Package Documentation') {
            steps {
                // Pack the generated HTML documentation
                sh 'tar -czf doc.tar.gz html/'
            }
        }

        stage('Archive Artifacts') {
            steps {
                // Archive the documentation package
                archiveArtifacts artifacts: 'doc.tar.gz', fingerprint: true
            }
        }
    }

    post {
        always {
            // Clean up workspace
            cleanWs()
        }
    }
}